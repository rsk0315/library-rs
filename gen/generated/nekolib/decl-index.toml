[declared]
AddAssoc = ["traits", "additive"]
AddComm = ["traits", "additive"]
AssocVal = ["traits", "assoc_val"]
Associative = ["traits", "binop"]
CommutativeGroup = ["traits", "binop"]
CommutativeMonoid = ["traits", "binop"]
CommutativeRing = ["traits", "binop"]
Coomutative = ["traits", "binop"]
DisjointSparseTable = ["ds", "disjoint_sparse_table"]
Distributive = ["traits", "binop"]
ElasticSlice = ["traits", "elastic_slice"]
EndBounded = ["traits", "range_bounds"]
EndExclusive = ["traits", "range_bounds"]
EndInclusive = ["traits", "range_bounds"]
EndUnbounded = ["traits", "range_bounds"]
ExpandBack = ["traits", "elastic_slice"]
ExpandFront = ["traits", "elastic_slice"]
Field = ["traits", "binop"]
Fold = ["traits", "fold"]
FoldBisect = ["traits", "fold_bisect"]
FoldBisectRev = ["traits", "fold_bisect"]
FoldableDeque = ["ds", "foldable_deque"]
FoldableQueue = ["ds", "foldable_queue"]
GetMut = ["traits", "get_mut"]
Group = ["traits", "binop"]
Identity = ["traits", "binop"]
IntervalSet = ["ds", "interval_set"]
KmpSearcher = ["seq", "kmp"]
Magma = ["traits", "binop"]
Max = ["traits", "max"]
Min = ["traits", "min"]
ModInt = ["math", "modint"]
Monoid = ["traits", "binop"]
MulAssoc = ["traits", "multiplicative"]
MulComm = ["traits", "multiplicative"]
MulRecip = ["traits", "multiplicative"]
One = ["traits", "multiplicative"]
OpAdd = ["utils", "op_add"]
OpMax = ["utils", "op_max"]
OpMin = ["utils", "op_min"]
OpMul = ["utils", "op_mul"]
OpRollHash = ["utils", "op_roll_hash"]
PartialRecip = ["traits", "binop"]
PopBack = ["traits", "push_pop"]
PopFront = ["traits", "push_pop"]
Push = ["traits", "push_pop"]
PushFront = ["traits", "push_pop"]
Recip = ["traits", "binop"]
Ring = ["traits", "binop"]
Scanner = ["utils", "scanner"]
Semigroup = ["traits", "binop"]
SetValue = ["traits", "set_value"]
ShrinkBack = ["traits", "elastic_slice"]
ShrinkFront = ["traits", "elastic_slice"]
SliceHash = ["traits", "elastic_slice"]
StartBounded = ["traits", "range_bounds"]
StartInclusive = ["traits", "range_bounds"]
StartUnbounded = ["traits", "range_bounds"]
StatefulPred = ["traits", "stateful_predicate"]
SuffixArray = ["seq", "suffix_array"]
UnionFind = ["ds", "union_find"]
VecSegtree = ["ds", "vec_segtree"]
Zero = ["traits", "additive"]
bisect = ["algo", "bisect"]
bounds_within = ["utils", "buf_range"]
dijkstra = ["graph", "dijkstra"]
extremum = ["algo", "extremum"]
extremum_float = ["algo", "extremum_float"]
mo = ["algo", "mo"]
parallel_bisect = ["algo", "parallel_bisect"]
scc = ["graph", "scc"]
tortoise_hare = ["algo", "tortoise_hare"]
window_bisect = ["algo", "window_bisect"]

[[depends]]
name = ["algo", "mo"]
direct = [["traits", "elastic_slice"]]
whole = [["traits", "elastic_slice"]]

[[depends]]
name = ["algo", "parallel_bisect"]
direct = [["traits", "stateful_predicate"]]
whole = [["traits", "stateful_predicate"]]

[[depends]]
name = ["algo", "window_bisect"]
direct = [["traits", "elastic_slice"]]
whole = [["traits", "elastic_slice"]]

[[depends]]
name = ["ds", "disjoint_sparse_table"]
direct = [["traits", "binop"], ["traits", "fold"], ["utils", "buf_range"]]
whole = [["traits", "binop"], ["traits", "fold"], ["utils", "buf_range"]]

[[depends]]
name = ["ds", "foldable_deque"]
direct = [["traits", "binop"], ["traits", "fold"], ["traits", "push_pop"]]
whole = [["traits", "binop"], ["traits", "fold"], ["traits", "push_pop"]]

[[depends]]
name = ["ds", "foldable_queue"]
direct = [["traits", "binop"], ["traits", "fold"], ["traits", "push_pop"]]
whole = [["traits", "binop"], ["traits", "fold"], ["traits", "push_pop"]]

[[depends]]
name = ["ds", "union_find"]
direct = [["traits", "disjoint-set"]]
whole = [["traits", "disjoint-set"]]

[[depends]]
name = ["ds", "vec_segtree"]
direct = [["traits", "binop"], ["traits", "fold"], ["traits", "fold_bisect"], ["traits", "get_mut"], ["traits", "set_value"], ["utils", "buf_range"]]
whole = [["traits", "binop"], ["traits", "fold"], ["traits", "fold_bisect"], ["traits", "get_mut"], ["traits", "set_value"], ["utils", "buf_range"]]

[[depends]]
name = ["math", "modint"]
direct = [["traits", "additive"], ["traits", "assoc_val"], ["traits", "multiplicative"]]
whole = [["traits", "additive"], ["traits", "assoc_val"], ["traits", "multiplicative"]]

[[depends]]
name = ["math", "polynomial"]
direct = [["math", "modint"], ["traits", "assoc_val"]]
whole = [["math", "modint"], ["traits", "additive"], ["traits", "assoc_val"], ["traits", "multiplicative"]]

[[depends]]
name = ["seq", "kmp"]
direct = [["traits", "push_pop"]]
whole = [["traits", "push_pop"]]

[[depends]]
name = ["seq", "z_algo"]
direct = [["traits", "push_pop"]]
whole = [["traits", "push_pop"]]

[[depends]]
name = ["traits", "fold"]
direct = [["traits", "binop"]]
whole = [["traits", "binop"]]

[[depends]]
name = ["traits", "fold_bisect"]
direct = [["traits", "binop"], ["traits", "fold"]]
whole = [["traits", "binop"], ["traits", "fold"]]

[[depends]]
name = ["utils", "op_add"]
direct = [["traits", "additive"], ["traits", "binop"]]
whole = [["traits", "additive"], ["traits", "binop"]]

[[depends]]
name = ["utils", "op_max"]
direct = [["traits", "binop"], ["traits", "min"]]
whole = [["traits", "binop"], ["traits", "min"]]

[[depends]]
name = ["utils", "op_min"]
direct = [["traits", "binop"], ["traits", "max"]]
whole = [["traits", "binop"], ["traits", "max"]]

[[depends]]
name = ["utils", "op_mul"]
direct = [["traits", "binop"], ["traits", "multiplicative"], ["utils", "op_add"]]
whole = [["traits", "additive"], ["traits", "binop"], ["traits", "multiplicative"], ["utils", "op_add"]]

[[depends]]
name = ["utils", "op_roll_hash"]
direct = [["traits", "additive"], ["traits", "assoc_val"], ["traits", "binop"], ["traits", "multiplicative"]]
whole = [["traits", "additive"], ["traits", "assoc_val"], ["traits", "binop"], ["traits", "multiplicative"]]

[declared]
Act = ["traits", "act"]
AddAssoc = ["traits", "additive"]
AddComm = ["traits", "additive"]
AssocVal = ["traits", "assoc_val"]
Associative = ["traits", "binop"]
BicrementalMedian = ["ds", "bicremental_median"]
BicrementalMedianDev = ["ds", "bicremental_median_dev"]
Commutative = ["traits", "binop"]
CommutativeGroup = ["traits", "binop"]
CommutativeMonoid = ["traits", "binop"]
CommutativeRing = ["traits", "binop"]
ConstDiv = ["math", "const_div"]
ConstDiv2 = ["math", "const_div"]
Count = ["traits", "count"]
Count3way = ["traits", "count"]
DisjointSet = ["traits", "disjoint_set"]
DisjointSparseTable = ["ds", "disjoint_sparse_table"]
Distributive = ["traits", "binop"]
ElasticSlice = ["traits", "elastic_slice"]
EndBounded = ["traits", "range_bounds"]
EndExclusive = ["traits", "range_bounds"]
EndInclusive = ["traits", "range_bounds"]
EndUnbounded = ["traits", "range_bounds"]
ExpandBack = ["traits", "elastic_slice"]
ExpandFront = ["traits", "elastic_slice"]
Field = ["traits", "binop"]
FindNth = ["traits", "find_nth"]
Fold = ["traits", "fold"]
FoldBisect = ["traits", "fold_bisect"]
FoldBisectRev = ["traits", "fold_bisect"]
FoldableDeque = ["ds", "foldable_deque"]
FoldableQueue = ["ds", "foldable_queue"]
GetMut = ["traits", "get_mut"]
Group = ["traits", "binop"]
HarmonicSum = ["math", "harmonic_sum"]
Identity = ["traits", "binop"]
IncrementalLineSet = ["math", "incremental_line_set"]
IntervalSet = ["ds", "interval_set"]
KmpSearcher = ["seq", "kmp"]
LinearSieve = ["math", "linear_sieve"]
Magma = ["traits", "binop"]
Max = ["traits", "max"]
Min = ["traits", "min"]
ModInt = ["math", "modint"]
Monoid = ["traits", "binop"]
MonoidAction = ["traits", "action"]
MulAssoc = ["traits", "multiplicative"]
MulComm = ["traits", "multiplicative"]
MulRecip = ["traits", "multiplicative"]
One = ["traits", "multiplicative"]
OpAdd = ["utils", "op_add"]
OpMax = ["utils", "op_max"]
OpMin = ["utils", "op_min"]
OpMul = ["utils", "op_mul"]
OpRollHash = ["utils", "op_roll_hash"]
PartialRecip = ["traits", "binop"]
Pop = ["traits", "push_pop"]
PopBack = ["traits", "push_pop"]
PopFront = ["traits", "push_pop"]
Push = ["traits", "push_pop"]
PushBack = ["traits", "push_pop"]
PushFront = ["traits", "push_pop"]
Quantile = ["traits", "quantile"]
Recip = ["traits", "binop"]
Ring = ["traits", "binop"]
RsDict = ["ds", "rs_dict"]
Scanner = ["utils", "scanner"]
Semigroup = ["traits", "binop"]
SetValue = ["traits", "set_value"]
ShrinkBack = ["traits", "elastic_slice"]
ShrinkFront = ["traits", "elastic_slice"]
SliceHash = ["traits", "elastic_slice"]
SlopeFunction = ["math", "slope_function"]
StartBounded = ["traits", "range_bounds"]
StartInclusive = ["traits", "range_bounds"]
StartUnbounded = ["traits", "range_bounds"]
StatefulPred = ["traits", "stateful_predicate"]
SuffixArray = ["seq", "suffix_array"]
TwoSat = ["math", "two_sat"]
UnionFind = ["ds", "union_find"]
VecActSegtree = ["ds", "vec_act_segtree"]
VecSegtree = ["ds", "vec_segtree"]
WaveletMatrix = ["ds", "wavelet_matrix"]
ZSearcher = ["seq", "z_algo"]
Zero = ["traits", "additive"]
bisect = ["algo", "bisect"]
bisect_slice = ["algo", "bisect"]
bounds_within = ["utils", "buf_range"]
carmichael_lambda = ["math", "carmichael_lambda_"]
dijkstra = ["graph", "dijkstra_"]
dinic = ["graph", "dinic_"]
divisors = ["math", "divisors_"]
dlog = ["math", "dlog_"]
euler_phi = ["math", "euler_phi_"]
extremum = ["algo", "extremum"]
extremum_float = ["algo", "extremum_float"]
extremum_slice = ["algo", "extremum"]
factors = ["math", "factors_"]
factors_dup = ["math", "factors_"]
gcd = ["math", "gcd_"]
gcd_recip = ["math", "gcd_recip_"]
lcm = ["math", "lcm_"]
linear_floor_sum = ["math", "linear_floor_sum_"]
minmax = ["algo", "minmax"]
minmax_by = ["algo", "minmax"]
minmax_by_key = ["algo", "minmax"]
mo = ["algo", "mo"]
mod_pow = ["math", "mod_pow_"]
mod_pow_with_cd = ["math", "mod_pow_"]
ord = ["math", "ord_"]
overflowing_lcm = ["math", "lcm_"]
parallel_bisect = ["algo", "parallel_bisect"]
prime_pi = ["math", "count_prime"]
scc = ["graph", "scc_"]
tortoise_hare = ["algo", "tortoise_hare"]
window_bisect = ["algo", "window_bisect"]

[[depends]]
name = ["algo", "mo"]
direct = [["traits", "elastic_slice"]]
whole = [["traits", "elastic_slice"]]

[[depends]]
name = ["algo", "parallel_bisect"]
direct = [["traits", "stateful_predicate"]]
whole = [["traits", "stateful_predicate"]]

[[depends]]
name = ["algo", "window_bisect"]
direct = [["traits", "elastic_slice"]]
whole = [["traits", "elastic_slice"]]

[[depends]]
name = ["ds", "bicremental_median_dev"]
direct = [["traits", "binop"]]
whole = [["traits", "binop"]]

[[depends]]
name = ["ds", "disjoint_sparse_table"]
direct = [["traits", "binop"], ["traits", "fold"], ["utils", "buf_range"]]
whole = [["traits", "binop"], ["traits", "fold"], ["utils", "buf_range"]]

[[depends]]
name = ["ds", "foldable_deque"]
direct = [["traits", "binop"], ["traits", "fold"], ["traits", "push_pop"]]
whole = [["traits", "binop"], ["traits", "fold"], ["traits", "push_pop"]]

[[depends]]
name = ["ds", "foldable_queue"]
direct = [["traits", "binop"], ["traits", "fold"], ["traits", "push_pop"]]
whole = [["traits", "binop"], ["traits", "fold"], ["traits", "push_pop"]]

[[depends]]
name = ["ds", "potentialized_union_find"]
direct = [["traits", "binop"], ["traits", "potential_function"]]
whole = [["traits", "binop"], ["traits", "potential_function"]]

[[depends]]
name = ["ds", "rs_dict"]
direct = [["traits", "count"], ["traits", "find_nth"], ["utils", "buf_range"]]
whole = [["traits", "count"], ["traits", "find_nth"], ["utils", "buf_range"]]

[[depends]]
name = ["ds", "union_find"]
direct = [["traits", "disjoint_set"]]
whole = [["traits", "disjoint_set"]]

[[depends]]
name = ["ds", "vec_act_segtree"]
direct = [["traits", "act"], ["traits", "action"], ["traits", "binop"], ["traits", "fold"], ["traits", "fold_bisect"], ["utils", "buf_range"]]
whole = [["traits", "act"], ["traits", "action"], ["traits", "binop"], ["traits", "fold"], ["traits", "fold_bisect"], ["utils", "buf_range"]]

[[depends]]
name = ["ds", "vec_segtree"]
direct = [["traits", "binop"], ["traits", "fold"], ["traits", "fold_bisect"], ["traits", "get_mut"], ["traits", "set_value"], ["utils", "buf_range"]]
whole = [["traits", "binop"], ["traits", "fold"], ["traits", "fold_bisect"], ["traits", "get_mut"], ["traits", "set_value"], ["utils", "buf_range"]]

[[depends]]
name = ["ds", "wavelet_matrix"]
direct = [["ds", "rs_dict"], ["traits", "count"], ["traits", "find_nth"], ["traits", "quantile"], ["utils", "buf_range"]]
whole = [["ds", "rs_dict"], ["traits", "count"], ["traits", "find_nth"], ["traits", "quantile"], ["utils", "buf_range"]]

[[depends]]
name = ["math", "carmichael_lambda_"]
direct = [["math", "factors_"]]
whole = [["math", "factors_"]]

[[depends]]
name = ["math", "dlog_"]
direct = [["math", "carmichael_lambda_"], ["math", "const_div"], ["math", "divisors_"], ["math", "factors_"], ["math", "gcd_recip_"], ["math", "mod_pow_"]]
whole = [["math", "carmichael_lambda_"], ["math", "const_div"], ["math", "divisors_"], ["math", "factors_"], ["math", "gcd_recip_"], ["math", "mod_pow_"]]

[[depends]]
name = ["math", "euler_phi_"]
direct = [["math", "factors_"]]
whole = [["math", "factors_"]]

[[depends]]
name = ["math", "lcm_"]
direct = [["math", "gcd_"]]
whole = [["math", "gcd_"]]

[[depends]]
name = ["math", "mod_pow_"]
direct = [["math", "const_div"]]
whole = [["math", "const_div"]]

[[depends]]
name = ["math", "modint"]
direct = [["traits", "additive"], ["traits", "assoc_val"], ["traits", "multiplicative"]]
whole = [["traits", "additive"], ["traits", "assoc_val"], ["traits", "multiplicative"]]

[[depends]]
name = ["math", "ord_"]
direct = [["math", "euler_phi_"], ["math", "factors_"], ["math", "mod_pow_"]]
whole = [["math", "const_div"], ["math", "euler_phi_"], ["math", "factors_"], ["math", "mod_pow_"]]

[[depends]]
name = ["math", "polynomial"]
direct = [["math", "modint"], ["traits", "assoc_val"]]
whole = [["math", "modint"], ["traits", "additive"], ["traits", "assoc_val"], ["traits", "multiplicative"]]

[[depends]]
name = ["math", "two_sat"]
direct = [["graph", "scc_"]]
whole = [["graph", "scc_"]]

[[depends]]
name = ["seq", "kmp"]
direct = [["traits", "push_pop"]]
whole = [["traits", "push_pop"]]

[[depends]]
name = ["traits", "act"]
direct = [["traits", "action"], ["traits", "binop"]]
whole = [["traits", "action"], ["traits", "binop"]]

[[depends]]
name = ["traits", "action"]
direct = [["traits", "binop"]]
whole = [["traits", "binop"]]

[[depends]]
name = ["traits", "fold"]
direct = [["traits", "binop"]]
whole = [["traits", "binop"]]

[[depends]]
name = ["traits", "fold_bisect"]
direct = [["traits", "binop"], ["traits", "fold"]]
whole = [["traits", "binop"], ["traits", "fold"]]

[[depends]]
name = ["traits", "potential_function"]
direct = [["traits", "binop"]]
whole = [["traits", "binop"]]

[[depends]]
name = ["utils", "op_add"]
direct = [["traits", "additive"], ["traits", "binop"]]
whole = [["traits", "additive"], ["traits", "binop"]]

[[depends]]
name = ["utils", "op_max"]
direct = [["traits", "binop"], ["traits", "min"]]
whole = [["traits", "binop"], ["traits", "min"]]

[[depends]]
name = ["utils", "op_min"]
direct = [["traits", "binop"], ["traits", "max"]]
whole = [["traits", "binop"], ["traits", "max"]]

[[depends]]
name = ["utils", "op_mul"]
direct = [["traits", "binop"], ["traits", "multiplicative"], ["utils", "op_add"]]
whole = [["traits", "additive"], ["traits", "binop"], ["traits", "multiplicative"], ["utils", "op_add"]]

[[depends]]
name = ["utils", "op_roll_hash"]
direct = [["traits", "additive"], ["traits", "assoc_val"], ["traits", "binop"], ["traits", "multiplicative"]]
whole = [["traits", "additive"], ["traits", "assoc_val"], ["traits", "binop"], ["traits", "multiplicative"]]

[declared]
ASCII = ["utils", "ascii"]
ASCII_ALPHABETIC = ["utils", "ascii"]
ASCII_ALPHANUMERIC = ["utils", "ascii"]
ASCII_CONTROL = ["utils", "ascii"]
ASCII_DIGIT = ["utils", "ascii"]
ASCII_GRAPHIC = ["utils", "ascii"]
ASCII_HEXDIGIT = ["utils", "ascii"]
ASCII_LOWERCASE = ["utils", "ascii"]
ASCII_PUNCTUATION = ["utils", "ascii"]
ASCII_UPPERCASE = ["utils", "ascii"]
ASCII_WHITESPACE = ["utils", "ascii"]
Act = ["traits", "act"]
AddAssoc = ["traits", "additive"]
AddComm = ["traits", "additive"]
AssocVal = ["traits", "assoc_val"]
Associative = ["traits", "binop"]
BTreeBimap = ["ds", "btree_bimap"]
BTreeMultiset = ["ds", "btree_multiset"]
BicrementalMedian = ["ds", "bicremental_median"]
BicrementalMedianDev = ["ds", "bicremental_median_dev"]
Bisect = ["traits", "bisect"]
BitSet = ["ds", "bit_set"]
CarmichaelLambda = ["math", "carmichael_lambda"]
CommonQuot = ["math", "common_quot"]
Commutative = ["traits", "binop"]
CommutativeGroup = ["traits", "binop"]
CommutativeMonoid = ["traits", "binop"]
CommutativeRing = ["traits", "binop"]
CompactSieve = ["math", "compact_sieve"]
ConstDiv = ["math", "const_div"]
ConstDiv2 = ["math", "const_div"]
Count = ["traits", "count"]
Count3way = ["traits", "count"]
CuckooHashMap = ["ds", "cuckoo_hash_map"]
CuckooHashSet = ["ds", "cuckoo_hash_set"]
DLog = ["math", "dlog"]
DecrementalUsizeSet = ["ds", "decremental_usize_set"]
DigitSum = ["math", "digit_sum"]
DisjointSet = ["traits", "disjoint_set"]
DisjointSparseTable = ["ds", "disjoint_sparse_table"]
Distributive = ["traits", "binop"]
Divisors = ["math", "divisors"]
ElasticSlice = ["traits", "elastic_slice"]
EndBounded = ["traits", "range_bounds"]
EndExclusive = ["traits", "range_bounds"]
EndInclusive = ["traits", "range_bounds"]
EndUnbounded = ["traits", "range_bounds"]
EquivMod = ["math", "equiv_mod"]
EquivModIter = ["math", "equiv_mod"]
EulerPhi = ["math", "euler_phi"]
ExactCover = ["algo", "exact_cover"]
ExpandBack = ["traits", "elastic_slice"]
ExpandFront = ["traits", "elastic_slice"]
Factors = ["math", "factors"]
FactorsDup = ["math", "factors_dup"]
Field = ["traits", "binop"]
FindNth = ["traits", "find_nth"]
Fold = ["traits", "fold"]
FoldBisect = ["traits", "fold_bisect"]
FoldBisectRev = ["traits", "fold_bisect"]
FoldableDeque = ["ds", "foldable_deque"]
FoldableQueue = ["ds", "foldable_queue"]
FunctionalGraph = ["graph", "functional_graph"]
Gcd = ["math", "gcd"]
GcdRecip = ["math", "gcd_recip"]
GetMut = ["traits", "get_mut"]
Group = ["traits", "binop"]
GroupBy = ["traits", "group_by"]
HarmonicFloorSum = ["math", "harmonic_floor_sum"]
Identity = ["traits", "binop"]
IncrementalLineSet = ["ds", "incremental_line_set"]
Interpolation = ["math", "interpolation"]
IntervalMap = ["ds", "interval_map"]
IntervalSet = ["ds", "interval_set"]
KmpSearcher = ["seq", "kmp"]
Larsch = ["algo", "larsch"]
Lcm = ["math", "lcm"]
LinearFloorSum = ["math", "linear_floor_sum"]
LinearSieve = ["math", "linear_sieve"]
Magma = ["traits", "binop"]
MakeMax = ["utils", "make_minmax"]
MakeMin = ["utils", "make_minmax"]
Max = ["traits", "max"]
Min = ["traits", "min"]
ModAckermann = ["math", "mod_ackermann"]
ModFactorialBinom = ["math", "mod_factorial_binom"]
ModInt = ["math", "modint"]
ModOrd = ["math", "mod_ord"]
ModPow = ["math", "mod_pow"]
ModTetration = ["math", "mod_tetration"]
Monoid = ["traits", "binop"]
MonoidAction = ["traits", "action"]
MulAssoc = ["traits", "multiplicative"]
MulComm = ["traits", "multiplicative"]
MulRecip = ["traits", "multiplicative"]
N1Rmq = ["ds", "n1_rmq"]
One = ["traits", "multiplicative"]
OpAdd = ["utils", "op_add"]
OpAddCount = ["utils", "op_add_count"]
OpAddOnOpAddCount = ["utils", "op_add_on_op_add_count"]
OpAddOnOpMax = ["utils", "op_add_on_op_max"]
OpAddOnOpMin = ["utils", "op_add_on_op_min"]
OpAffine = ["utils", "op_affine"]
OpAffineOnOpAddCount = ["utils", "op_affine_on_op_add_count"]
OpClosure = ["utils", "op_closure"]
OpClosureOnOpClosure = ["utils", "op_closure_on_op_closure"]
OpGcd = ["utils", "op_gcd"]
OpMax = ["utils", "op_max"]
OpMin = ["utils", "op_min"]
OpMul = ["utils", "op_mul"]
OpRollHash = ["utils", "op_roll_hash"]
PartialRecip = ["traits", "binop"]
Pdep = ["utils", "bitop"]
PdepPextMaskU128 = ["utils", "bitop"]
PdepPextMaskU16 = ["utils", "bitop"]
PdepPextMaskU32 = ["utils", "bitop"]
PdepPextMaskU64 = ["utils", "bitop"]
PdepPextMaskU8 = ["utils", "bitop"]
PerLine = ["utils", "output"]
Pext = ["utils", "bitop"]
Pop = ["traits", "push_pop"]
PopBack = ["traits", "push_pop"]
PopFront = ["traits", "push_pop"]
PotentialFunction = ["traits", "potential_function"]
PotentializedUnionFind = ["ds", "potentialized_union_find"]
Push = ["traits", "push_pop"]
PushBack = ["traits", "push_pop"]
PushFront = ["traits", "push_pop"]
Quantile = ["traits", "quantile"]
RandomGenerator = ["utils", "rand_gen_macro"]
Recip = ["traits", "binop"]
RemovableHeap = ["ds", "removable_heap"]
Ring = ["traits", "binop"]
RsDict = ["ds", "rs_dict"]
Scanner = ["utils", "scanner"]
Semigroup = ["traits", "binop"]
SetValue = ["traits", "set_value"]
ShrinkBack = ["traits", "elastic_slice"]
ShrinkFront = ["traits", "elastic_slice"]
SieveN2Plus1 = ["math", "sieve_n2_plus_1"]
SieveN2PlusNPlus1 = ["math", "sieve_n2_plus_n_plus_1"]
SkewHeap = ["ds", "skew_heap"]
SliceHash = ["traits", "elastic_slice"]
SlopeFunction = ["math", "slope_function"]
SpaceSep = ["utils", "output"]
Sqrt = ["math", "sqrt"]
StartBounded = ["traits", "range_bounds"]
StartInclusive = ["traits", "range_bounds"]
StartUnbounded = ["traits", "range_bounds"]
StatefulPred = ["traits", "stateful_predicate"]
StrSep = ["utils", "output"]
SuffixArray = ["seq", "suffix_array"]
TreeCata = ["graph", "tree_cata"]
TwoSat = ["math", "two_sat"]
UnionFind = ["ds", "union_find"]
UsizeGroupBy = ["traits", "usize_group_by"]
VecActSegtree = ["ds", "vec_act_segtree"]
VecMarker = ["utils", "rand_gen_macro"]
VecSegtree = ["ds", "vec_segtree"]
WaveletMatrix = ["ds", "wavelet_matrix"]
ZSearcher = ["seq", "z_algo"]
Zero = ["traits", "additive"]
bisect = ["algo", "bisect_"]
bisect_slice = ["algo", "bisect_"]
bit_binom = ["math", "bit_binom_"]
bounds_within = ["utils", "buf_range"]
charset = ["utils", "ascii"]
check_bounds = ["utils", "buf_range"]
check_bounds_range = ["utils", "buf_range"]
continued_fraction = ["math", "continued_fraction_"]
convolve = ["algo", "karatsuba"]
cycle_mu_lambda = ["algo", "tortoise_hare"]
cycle_nth = ["algo", "tortoise_hare"]
dijkstra = ["graph", "dijkstra_"]
dinic = ["graph", "dinic_"]
extremum = ["algo", "extremum"]
extremum_float = ["algo", "extremum_float"]
extremum_slice = ["algo", "extremum"]
hilbert_mo = ["algo", "hilbert_mo_"]
index_order_by = ["algo", "index_order"]
index_order_by_key = ["algo", "index_order"]
majority = ["algo", "majority_"]
minmax = ["algo", "minmax"]
minmax_by = ["algo", "minmax"]
minmax_by_key = ["algo", "minmax"]
mo = ["algo", "mo"]
mod_recip_table_prime = ["math", "mod_recip_table_"]
next_permutation = ["algo", "permutation"]
ordered_hash = ["algo", "ordered_hash_"]
parallel_bisect = ["algo", "parallel_bisect"]
prime_pi = ["math", "prime_pi_"]
scc = ["graph", "scc_"]
sqrt_fraction = ["math", "sqrt_fraction_"]
sqrt_fraction_fn = ["math", "sqrt_fraction_"]
stern_brocot = ["math", "stern_brocot_"]
window_bisect = ["algo", "window_bisect"]

[[depends]]
name = ["algo", "hilbert_mo_"]
direct = [["traits", "elastic_slice"]]
whole = [["traits", "elastic_slice"]]

[[depends]]
name = ["algo", "mo"]
direct = [["math", "sqrt"], ["traits", "elastic_slice"]]
whole = [["math", "sqrt"], ["traits", "elastic_slice"]]

[[depends]]
name = ["algo", "parallel_bisect"]
direct = [["traits", "stateful_predicate"]]
whole = [["traits", "stateful_predicate"]]

[[depends]]
name = ["algo", "window_bisect"]
direct = [["traits", "elastic_slice"]]
whole = [["traits", "elastic_slice"]]

[[depends]]
name = ["ds", "bicremental_median_dev"]
direct = [["traits", "binop"]]
whole = [["traits", "binop"]]

[[depends]]
name = ["ds", "bit_set"]
direct = [["utils", "buf_range"]]
whole = [["utils", "buf_range"]]

[[depends]]
name = ["ds", "cuckoo_hash_set"]
direct = [["ds", "cuckoo_hash_map"]]
whole = [["ds", "cuckoo_hash_map"]]

[[depends]]
name = ["ds", "disjoint_sparse_table"]
direct = [["traits", "binop"], ["traits", "fold"], ["utils", "buf_range"]]
whole = [["traits", "binop"], ["traits", "fold"], ["utils", "buf_range"]]

[[depends]]
name = ["ds", "foldable_deque"]
direct = [["traits", "binop"], ["traits", "fold"], ["traits", "push_pop"]]
whole = [["traits", "binop"], ["traits", "fold"], ["traits", "push_pop"]]

[[depends]]
name = ["ds", "foldable_queue"]
direct = [["traits", "binop"], ["traits", "fold"], ["traits", "push_pop"]]
whole = [["traits", "binop"], ["traits", "fold"], ["traits", "push_pop"]]

[[depends]]
name = ["ds", "incremental_line_set"]
direct = [["ds", "btree_bimap"]]
whole = [["ds", "btree_bimap"]]

[[depends]]
name = ["ds", "potentialized_union_find"]
direct = [["traits", "binop"], ["traits", "potential_function"]]
whole = [["traits", "binop"], ["traits", "potential_function"]]

[[depends]]
name = ["ds", "rs_dict"]
direct = [["traits", "count"], ["traits", "find_nth"], ["utils", "buf_range"]]
whole = [["traits", "count"], ["traits", "find_nth"], ["utils", "buf_range"]]

[[depends]]
name = ["ds", "union_find"]
direct = [["traits", "disjoint_set"]]
whole = [["traits", "disjoint_set"]]

[[depends]]
name = ["ds", "vec_act_segtree"]
direct = [["traits", "act"], ["traits", "action"], ["traits", "binop"], ["traits", "fold"], ["traits", "fold_bisect"], ["traits", "get_mut"], ["utils", "buf_range"]]
whole = [["traits", "act"], ["traits", "action"], ["traits", "binop"], ["traits", "fold"], ["traits", "fold_bisect"], ["traits", "get_mut"], ["utils", "buf_range"]]

[[depends]]
name = ["ds", "vec_segtree"]
direct = [["traits", "binop"], ["traits", "fold"], ["traits", "fold_bisect"], ["traits", "get_mut"], ["traits", "set_value"], ["utils", "buf_range"]]
whole = [["traits", "binop"], ["traits", "fold"], ["traits", "fold_bisect"], ["traits", "get_mut"], ["traits", "set_value"], ["utils", "buf_range"]]

[[depends]]
name = ["ds", "wavelet_matrix"]
direct = [["ds", "rs_dict"], ["traits", "count"], ["traits", "find_nth"], ["traits", "quantile"], ["utils", "buf_range"]]
whole = [["ds", "rs_dict"], ["traits", "count"], ["traits", "find_nth"], ["traits", "quantile"], ["utils", "buf_range"]]

[[depends]]
name = ["math", "carmichael_lambda"]
direct = [["math", "factors"], ["math", "lcm"]]
whole = [["math", "factors"], ["math", "gcd"], ["math", "lcm"]]

[[depends]]
name = ["math", "crt"]
direct = [["math", "gcd_recip"]]
whole = [["math", "gcd_recip"]]

[[depends]]
name = ["math", "dlog"]
direct = [["math", "carmichael_lambda"], ["math", "divisors"], ["math", "factors"], ["math", "gcd"], ["math", "mod_pow"]]
whole = [["math", "carmichael_lambda"], ["math", "divisors"], ["math", "factors"], ["math", "gcd"], ["math", "lcm"], ["math", "mod_pow"]]

[[depends]]
name = ["math", "equiv_mod"]
direct = [["math", "gcd_recip"]]
whole = [["math", "gcd_recip"]]

[[depends]]
name = ["math", "euler_phi"]
direct = [["math", "factors"]]
whole = [["math", "factors"]]

[[depends]]
name = ["math", "interpolation"]
direct = [["math", "const_div"], ["math", "gcd_recip"]]
whole = [["math", "const_div"], ["math", "gcd_recip"]]

[[depends]]
name = ["math", "lcm"]
direct = [["math", "gcd"]]
whole = [["math", "gcd"]]

[[depends]]
name = ["math", "linear_sieve"]
direct = [["math", "gcd_recip"]]
whole = [["math", "gcd_recip"]]

[[depends]]
name = ["math", "mod_ackermann"]
direct = [["math", "mod_pow"], ["math", "mod_tetration"]]
whole = [["math", "euler_phi"], ["math", "factors"], ["math", "mod_pow"], ["math", "mod_tetration"]]

[[depends]]
name = ["math", "mod_factorial_binom"]
direct = [["math", "mod_recip_table_"]]
whole = [["math", "mod_recip_table_"]]

[[depends]]
name = ["math", "mod_ord"]
direct = [["math", "carmichael_lambda"], ["math", "factors_dup"], ["math", "gcd"], ["math", "mod_pow"]]
whole = [["math", "carmichael_lambda"], ["math", "factors"], ["math", "factors_dup"], ["math", "gcd"], ["math", "lcm"], ["math", "mod_pow"]]

[[depends]]
name = ["math", "mod_tetration"]
direct = [["math", "euler_phi"]]
whole = [["math", "euler_phi"], ["math", "factors"]]

[[depends]]
name = ["math", "modint"]
direct = [["traits", "additive"], ["traits", "assoc_val"], ["traits", "multiplicative"]]
whole = [["traits", "additive"], ["traits", "assoc_val"], ["traits", "multiplicative"]]

[[depends]]
name = ["math", "polynomial"]
direct = [["math", "modint"], ["traits", "assoc_val"]]
whole = [["math", "modint"], ["traits", "additive"], ["traits", "assoc_val"], ["traits", "multiplicative"]]

[[depends]]
name = ["math", "prime_pi_"]
direct = [["math", "linear_sieve"], ["traits", "bisect"]]
whole = [["math", "gcd_recip"], ["math", "linear_sieve"], ["traits", "bisect"]]

[[depends]]
name = ["math", "sqrt_fraction_"]
direct = [["math", "sqrt"]]
whole = [["math", "sqrt"]]

[[depends]]
name = ["math", "two_sat"]
direct = [["graph", "scc_"]]
whole = [["graph", "scc_"]]

[[depends]]
name = ["seq", "kmp"]
direct = [["traits", "push_pop"]]
whole = [["traits", "push_pop"]]

[[depends]]
name = ["traits", "act"]
direct = [["traits", "action"], ["traits", "binop"]]
whole = [["traits", "action"], ["traits", "binop"]]

[[depends]]
name = ["traits", "action"]
direct = [["traits", "binop"]]
whole = [["traits", "binop"]]

[[depends]]
name = ["traits", "fold"]
direct = [["traits", "binop"]]
whole = [["traits", "binop"]]

[[depends]]
name = ["traits", "fold_bisect"]
direct = [["traits", "binop"], ["traits", "fold"]]
whole = [["traits", "binop"], ["traits", "fold"]]

[[depends]]
name = ["traits", "potential_function"]
direct = [["traits", "binop"]]
whole = [["traits", "binop"]]

[[depends]]
name = ["utils", "op_add"]
direct = [["traits", "additive"], ["traits", "binop"]]
whole = [["traits", "additive"], ["traits", "binop"]]

[[depends]]
name = ["utils", "op_add_count"]
direct = [["traits", "additive"], ["traits", "binop"]]
whole = [["traits", "additive"], ["traits", "binop"]]

[[depends]]
name = ["utils", "op_add_on_op_add_count"]
direct = [["traits", "action"], ["traits", "additive"], ["utils", "op_add"], ["utils", "op_add_count"]]
whole = [["traits", "action"], ["traits", "additive"], ["traits", "binop"], ["utils", "op_add"], ["utils", "op_add_count"]]

[[depends]]
name = ["utils", "op_add_on_op_max"]
direct = [["traits", "action"], ["traits", "additive"], ["traits", "binop"], ["traits", "min"], ["utils", "op_add"], ["utils", "op_max"]]
whole = [["traits", "action"], ["traits", "additive"], ["traits", "binop"], ["traits", "min"], ["utils", "op_add"], ["utils", "op_max"]]

[[depends]]
name = ["utils", "op_add_on_op_min"]
direct = [["traits", "action"], ["traits", "additive"], ["traits", "binop"], ["traits", "max"], ["utils", "op_add"], ["utils", "op_min"]]
whole = [["traits", "action"], ["traits", "additive"], ["traits", "binop"], ["traits", "max"], ["utils", "op_add"], ["utils", "op_min"]]

[[depends]]
name = ["utils", "op_affine"]
direct = [["traits", "additive"], ["traits", "binop"], ["traits", "multiplicative"]]
whole = [["traits", "additive"], ["traits", "binop"], ["traits", "multiplicative"]]

[[depends]]
name = ["utils", "op_affine_on_op_add_count"]
direct = [["traits", "action"], ["traits", "additive"], ["traits", "multiplicative"], ["utils", "op_add_count"], ["utils", "op_affine"]]
whole = [["traits", "action"], ["traits", "additive"], ["traits", "binop"], ["traits", "multiplicative"], ["utils", "op_add_count"], ["utils", "op_affine"]]

[[depends]]
name = ["utils", "op_closure"]
direct = [["traits", "binop"]]
whole = [["traits", "binop"]]

[[depends]]
name = ["utils", "op_closure_on_op_closure"]
direct = [["traits", "action"], ["utils", "op_closure"]]
whole = [["traits", "action"], ["traits", "binop"], ["utils", "op_closure"]]

[[depends]]
name = ["utils", "op_gcd"]
direct = [["math", "gcd"], ["traits", "additive"], ["traits", "binop"]]
whole = [["math", "gcd"], ["traits", "additive"], ["traits", "binop"]]

[[depends]]
name = ["utils", "op_max"]
direct = [["traits", "binop"], ["traits", "min"]]
whole = [["traits", "binop"], ["traits", "min"]]

[[depends]]
name = ["utils", "op_min"]
direct = [["traits", "binop"], ["traits", "max"]]
whole = [["traits", "binop"], ["traits", "max"]]

[[depends]]
name = ["utils", "op_mul"]
direct = [["traits", "binop"], ["traits", "multiplicative"], ["utils", "op_add"]]
whole = [["traits", "additive"], ["traits", "binop"], ["traits", "multiplicative"], ["utils", "op_add"]]

[[depends]]
name = ["utils", "op_roll_hash"]
direct = [["traits", "binop"]]
whole = [["traits", "binop"]]

[[depends]]
name = ["utils", "rand_gen_macro"]
direct = [["utils", "bitop"]]
whole = [["utils", "bitop"]]

//! ねこちゃんライブラリ。
//!
//! [![rsk0315](https://img.shields.io/endpoint?url=https%3A%2F%2Fatcoder-badges.now.sh%2Fapi%2Fatcoder%2Fjson%2Frsk0315)](https://atcoder.jp/users/rsk0315) の競プロライブラリです。
//! まだ bundler を作っていないため、競プロでの使用には適していないと思います。
//!
//! bundle の際、各クラス・関数の依存関係がわからないとつらいため、
//! クレートとして分けて作りたい気持ちがあります。全部貼るのはやだなので。
//! _Cargo.toml_ に依存関係を書いておけば、それを読んで解決すればよいためです。
//!
//! 一方で、コンテスト中に、どのクレートを使うかをいちいち _Cargo.toml_
//! に書くのは避けたいです。そこで、クレートごとに分けて作ったライブラリを、
//! 構造を保ったままモジュールに変換して、一つのクレートとしてしまえば、
//! ```toml
//! nekolib = { path = "/path/to/nekolib" }
//! ```
//! と書くだけで済むので、うれしいかなと思いました。コード中にも、
//! ```
//! use nekolib::ds::VecSegtree;
//! ```
//! のように書くだけで済み、クレート名などには気を払わなくてよくなりそうです。
//! いちいち内部構造を思い出すのは [やだなので](https://doc.rust-jp.rs/book-ja/ch14-02-publishing-to-crates-io.html?highlight=color#pub-use%E3%81%A7%E4%BE%BF%E5%88%A9%E3%81%AA%E5%85%AC%E9%96%8Bapi%E3%82%92%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B)。
//!
//! 単一クレートにまとめたかったもう一つの動機として、ドキュメントの見やすさがあります。
//! ワークスペース上に各種クレートを置いたのに対して `cargo doc` をすると、
//! 種類の異なるクレートが Crates にまとめられてしまい、探しにくいです。
//! 「アルゴリズム」「データ構造」「トレイト」「ユーティリティ」くらいの分類はあってほしいです。
//! それらの各々がモジュールであれば（すなわち `mod algo; mod ds;` のようになっていれば）、
//! ドキュメント上でも見やすくなるかなと思いました。
//!
//! ここまでで、次の三つが満たされたと思いました。
//! - ライブラリ間の依存関係がわかる
//! - コンテスト中の記述が楽
//! - ドキュメントが見やすい
//!
//! なのですが、大事なことを忘れていて、コンテスト中に書いた `e.rs` や `f.rs` などが
//! どのライブラリに依存しているかを簡単には判別できません。
//! おそらく、モジュールに変換しない状態でも _Cargo.toml_ に書く方法ではつらい気がします。
//! 共通の _Cargo.toml_ を使うと思うので、「E 問題で使ったライブラリは、F 問題では必要ないが
//! F 問題でも必要だと bundler は思い込んでいる」のような状況が生じる気がします。
//!
//! はー、困りました。
//! ```
//! use nekolib::algo::the_algo;
//! use nekolib::ds::{first_ds, second_ds};
//! use nekolib::traits::{
//!     some_trait, other_trait, yet_another_trait,
//!     one_more_trait,
//! };
//! ```
//! のような形式のみに限ることにすれば、自前で簡単にできそうです。
//! これらがコメントアウトされているかどうかは当面は気にしないことにします。
//! 複数行のコメント（しかもネストが可能）は面倒ですし、まず書かないですし。
//! 必要に迫られたら、ちゃんとした parser を書くことを検討しましょう。
//!
//! ところで、まだ困った問題があります。
//! verify 用の機構もある程度は作っているのですが、
//! 「これはこうやって verify した」という情報にドキュメント上で簡単にアクセスする方法が
//! わからないでいます。当然自動化されてほしいのですが、少々面倒そうです。
pub mod algo;
pub mod ds;
pub mod traits;
pub mod utils;
